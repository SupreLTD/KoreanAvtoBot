from aiogram import Router, types
from aiogram.filters import Command, Text
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from keyboards.start_kb import restart
from parsers.encar import get_raw_encar
from parsers.exchange_rates import get_rates
from parsers.tax import get_tax

router = Router()


class FSMlink(StatesGroup):
    var = State()


@router.callback_query(Text('l'))
async def link_start(cal: types.CallbackQuery, state: FSMContext):
    await cal.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É —Å —ç–Ω–∫–∞—Ä–∞ ')
    await state.set_state(FSMlink.var)


@router.message(FSMlink.var)
async def link_answer(message: types.Message, state: FSMContext):
    if message.text.startswith('http://www.encar.com/'):
        print(message.text)
        try:
            data = get_raw_encar(message.text)
            age = data[0]
            engine = data[1]
            capacity = data[2]
            price = data[3]
            age_raw = data[4]
            dvs_type = data[5]
            rates = get_rates()
            usd = rates['USD'][1]
            """–§–£–ù–ö–¶–ò–Ø –†–ê–°–ß–ï–¢–ê –ì–û–°–ü–û–®–õ–ò–ù"""
            tax = get_tax(age, engine, '195', capacity, str(price))
            """–ó–ê–¢–†–ê–¢–´ –í –ö–û–†–ï–ï"""
            spending_in_korea = (1500 * usd) + (1500 * usd) * 0.03  # setting
            """–ö–û–ú–ò–°–°–ò–Ø –í –†–û–°–°–ò–ò"""
            kom_ru = 50000
            """–î–û–°–¢–ê–í–ö–ê"""
            delivery = 300000
            total = spending_in_korea + kom_ru + float(
                tax['total'].replace(' ', '').replace(',', '.')) + delivery + price

            result_messsage = f'üïµÔ∏è –í–∞—à –∑–∞–ø—Ä–æ—Å: üëá\nüöó –í–æ–∑—Ä–∞—Å—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {age_raw} –ª–µ—Ç\n' \
                              f'üöï –¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è: {dvs_type}\n' \
                              f'üöô –û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è: {capacity} –º3\n' \
                              f'üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ —Ä—É–±: {float(price):.02f} ‚ÇΩ\n\n' \
                              f'‚Ä¢ –¢–∞–º–æ–∂–µ–Ω–Ω—ã–π —Å–±–æ—Ä: {tax["sbor"]} ‚ÇΩ\n‚Ä¢ –£—Ç–∏–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–±–æ—Ä: {tax["util"]} ‚ÇΩ\n' \
                              f'‚Ä¢ –¢–∞–º–æ–∂–µ–Ω–Ω–∞—è –ø–æ—à–ª–∏–Ω–∞: {tax["tax"]} ‚ÇΩ\n‚Ä¢ –†–∞—Å—Ö–æ–¥—ã –≤ –ö–æ—Ä–µ–µ: {spending_in_korea:.02f}\n' \
                              f'‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è –†–§: {kom_ru} ‚ÇΩ\n' \
                              f'‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞ {delivery} ‚ÇΩ\n\n ‚úÖ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {total:.02f} ‚ÇΩ'
            await message.answer(result_messsage, reply_markup=restart())

        except Exception as e:
            await message.answer('–°—Å—ã–ª–∫–∞ –Ω–µ —Ä–∞–±–æ—á–∞—è', reply_markup=restart())
        finally:
            await state.clear()
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É')
