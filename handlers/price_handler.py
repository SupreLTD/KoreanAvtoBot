import datetime

from aiogram import Router, types
from aiogram.filters import Command, Text
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from magic_filter import F

from keyboards import prices_kb as KB
from keyboards.start_kb import restart
from parsers.exchange_rates import get_rates
from parsers.tax import get_tax

router = Router()


class FSMPrice(StatesGroup):
    age = State()
    dvs = State()
    power = State()
    capacity = State()
    price = State()


@router.callback_query(Text('p'))
async def get_age(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer(
        'üöó –í–æ–∑—Ä–∞—Å—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è?',
        reply_markup=KB.age_choose()
    )
    await state.set_state(FSMPrice.age)


@router.callback_query(KB.PriceChoose.filter(F.action == 'price'))
async def get_dvs(call: types.CallbackQuery, callback_data: KB.PriceChoose, state: FSMContext):
    await state.update_data(age=callback_data.data)
    await state.update_data(age_answer=callback_data.answer)
    await call.message.edit_text(f'üöó –í–æ–∑—Ä–∞—Å—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è?\n\n‚úÖ –û—Ç–≤–µ—Ç: {callback_data.answer}')
    await call.message.answer('üöï –¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è?', reply_markup=KB.engine_choose())
    await state.set_state(FSMPrice.dvs)


@router.callback_query(KB.PriceChoose.filter(F.action == 'engine'))
async def get_power(call: types.CallbackQuery, callback_data: KB.PriceChoose, state: FSMContext):
    await state.update_data(dvs=callback_data.data)
    await state.update_data(dvs_answer=callback_data.answer)
    await call.message.edit_text(f'üöï –¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è?\n\n‚úÖ –û—Ç–≤–µ—Ç: {callback_data.answer}')
    await call.message.answer('üèé –ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è (–ª.—Å.)?')
    await state.set_state(FSMPrice.power)


@router.message(FSMPrice.power)
async def get_capacity(message: types.Message, state: FSMContext):
    if message.text.isdigit():

        await state.update_data(power=message.text)
        await message.answer(f'üèé –ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è (–ª.—Å.)?\n\n‚úÖ –û—Ç–≤–µ—Ç: {message.text} (–ª.—Å.)')
        await message.answer('üöô –û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è —Å–º3 (1 –ª = 1000 —Å–º3)?')
        await state.set_state(FSMPrice.capacity)
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!')
    await message.delete()



@router.message(FSMPrice.capacity)
async def get_price(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        await state.update_data(capacity=message.text)
        await message.answer(f'üöô –û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è —Å–º3 (1 –ª = 1000 —Å–º3)??\n\n‚úÖ –û—Ç–≤–µ—Ç: {message.text} (—Å–º3'
                             f')')
        await message.answer('üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ –í–æ–Ω–∞—Ö (‚Ç©)')
        await state.set_state(FSMPrice.price)
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!')
    await message.delete()


@router.message(FSMPrice.price)
async def result(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        fsm_res = await state.get_data()
        age = fsm_res['age']
        engine = fsm_res['dvs']
        power = fsm_res['power']
        capacity = fsm_res['capacity']

        rates = get_rates()
        rub_wong = 1 / rates['KRW'][1]
        wong_rub = rates['KRW'][1]
        usd = rates['USD'][1]

        price = float(message.text)*wong_rub
        tax = get_tax(age, engine, power, capacity, str(int(price)))
        """–ó–ê–¢–†–ê–¢–´ –í –ö–û–†–ï–ï"""
        spending_in_korea = (1500 * usd) * 1.03  # setting
        """–ö–û–ú–ò–°–°–ò–Ø –í –†–û–°–°–ò–ò"""
        kom_ru = 50000
        """–î–û–°–¢–ê–í–ö–ê"""
        delivery = 300000

        car_price_rub = float(price)*1.055

        total = spending_in_korea + kom_ru + float(tax['total'].replace(' ', '').replace(',', '.')) + delivery + car_price_rub

        result_messsage = f'üïµÔ∏è –í–∞—à –∑–∞–ø—Ä–æ—Å: üëá\nüöó –í–æ–∑—Ä–∞—Å—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {fsm_res["age_answer"]}\n' \
                          f'üöï –¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è: {fsm_res["dvs_answer"]}\nüèé –ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è: {power} –ª.—Å.\n' \
                          f'üöô –û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è: {capacity} –º3\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ —Ä—É–±: {float(car_price_rub):.02f}\n\n' \
                          f'–†–∞—Å—á–µ—Ç —Å —É—á–µ—Ç–æ–º –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç:\n1 ‚ÇΩ = {rub_wong:.02f} ‚Ç©\n1 ‚Ç© = {wong_rub} ‚ÇΩ\n' \
                          f'1 $ = {usd:.02f} ‚ÇΩ\n' \
                          f'* –ö—É—Ä—Å –≤–∞–ª—é—Ç –∞–∫—Ç—É–∞–ª–µ–Ω –Ω–∞: {datetime.datetime.now().replace(microsecond=0)}\n' \
                          f'—Å —Å–∞–π—Ç–∞ –¶–ë –†–§\n\n' \
                          f'‚Ä¢ –¢–∞–º–æ–∂–µ–Ω–Ω—ã–π —Å–±–æ—Ä: {tax["sbor"]} ‚ÇΩ\n‚Ä¢ –£—Ç–∏–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–±–æ—Ä: {tax["util"]} ‚ÇΩ\n' \
                          f'‚Ä¢ –¢–∞–º–æ–∂–µ–Ω–Ω–∞—è –ø–æ—à–ª–∏–Ω–∞: {tax["tax"]} ‚ÇΩ\n‚Ä¢ –†–∞—Å—Ö–æ–¥—ã –≤ –ö–æ—Ä–µ–µ: {spending_in_korea:.02f}\n' \
                          f'‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è –†–§: {kom_ru} ‚ÇΩ\n' \
                          f'‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞ {delivery} ‚ÇΩ\n\n ‚úÖ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {total:.02f} ‚ÇΩ'
        await message.answer(result_messsage, reply_markup=restart())
        await state.clear()
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!')
    await message.delete()

